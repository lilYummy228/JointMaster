//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""Phisics"",
            ""id"": ""b25fb9a4-4466-4d40-84e4-25652421a70e"",
            ""actions"": [
                {
                    ""name"": ""Force"",
                    ""type"": ""Button"",
                    ""id"": ""88dda582-da3e-4840-b650-9ba2c40ff7ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Launch"",
                    ""type"": ""Button"",
                    ""id"": ""7f3a96a7-8531-48a6-8cde-44ebcc6ded6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""ce6bd4ce-e261-4ad4-a1b5-2090f289cd3d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5a3fc5c4-62b8-4353-888a-487cd72c2675"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Force"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d3226d2-114d-43f7-ac0c-ce4927922620"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Launch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5e511f3-4fb6-41d2-ac0a-9d52a5f2ca4e"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Phisics
        m_Phisics = asset.FindActionMap("Phisics", throwIfNotFound: true);
        m_Phisics_Force = m_Phisics.FindAction("Force", throwIfNotFound: true);
        m_Phisics_Launch = m_Phisics.FindAction("Launch", throwIfNotFound: true);
        m_Phisics_Reload = m_Phisics.FindAction("Reload", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Phisics
    private readonly InputActionMap m_Phisics;
    private List<IPhisicsActions> m_PhisicsActionsCallbackInterfaces = new List<IPhisicsActions>();
    private readonly InputAction m_Phisics_Force;
    private readonly InputAction m_Phisics_Launch;
    private readonly InputAction m_Phisics_Reload;
    public struct PhisicsActions
    {
        private @Input m_Wrapper;
        public PhisicsActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Force => m_Wrapper.m_Phisics_Force;
        public InputAction @Launch => m_Wrapper.m_Phisics_Launch;
        public InputAction @Reload => m_Wrapper.m_Phisics_Reload;
        public InputActionMap Get() { return m_Wrapper.m_Phisics; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PhisicsActions set) { return set.Get(); }
        public void AddCallbacks(IPhisicsActions instance)
        {
            if (instance == null || m_Wrapper.m_PhisicsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PhisicsActionsCallbackInterfaces.Add(instance);
            @Force.started += instance.OnForce;
            @Force.performed += instance.OnForce;
            @Force.canceled += instance.OnForce;
            @Launch.started += instance.OnLaunch;
            @Launch.performed += instance.OnLaunch;
            @Launch.canceled += instance.OnLaunch;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
        }

        private void UnregisterCallbacks(IPhisicsActions instance)
        {
            @Force.started -= instance.OnForce;
            @Force.performed -= instance.OnForce;
            @Force.canceled -= instance.OnForce;
            @Launch.started -= instance.OnLaunch;
            @Launch.performed -= instance.OnLaunch;
            @Launch.canceled -= instance.OnLaunch;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
        }

        public void RemoveCallbacks(IPhisicsActions instance)
        {
            if (m_Wrapper.m_PhisicsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPhisicsActions instance)
        {
            foreach (var item in m_Wrapper.m_PhisicsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PhisicsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PhisicsActions @Phisics => new PhisicsActions(this);
    public interface IPhisicsActions
    {
        void OnForce(InputAction.CallbackContext context);
        void OnLaunch(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
    }
}
